{"version":3,"sources":["next-parse-request-args.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-parse-request-args.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var nxDelete = nx.delete || require('@feizheng/next-delete');\n  var DEFAULT_OPTIONS = { method: 'get' };\n  var DEL_FIELDS = ['method', 'url', 'data'];\n  var MSG_ERROR = 'The arguments.length should between 1 ~ 4.';\n  var HTTP_METHOD = ['GET', 'POST', 'DELETE', 'PUT', 'CONNECT', 'HEAD', 'OPTIONS', 'TRACE'];\n  var isValidMethod = function (arg) {\n    return HTTP_METHOD.includes(arg.toUpperCase());\n  };\n\n  nx.parseRequestArgs = function (inArguments, inIsArray) {\n    var args = inArguments;\n    var length = args.length;\n    var options = null;\n\n    // input:\n    // 1. (config)\n    // 1. (url)\n    // 2. (url, config)\n    // 2. (method, config)\n    // 3. (method, url, config)\n    // 4. (method, url, data, config)\n\n    switch (length) {\n      case 1:\n        options = typeof args[0] === 'string' ? { url: args[0] } : args[0];\n        break;\n      case 2:\n        options = isValidMethod(args[0])\n          ? nx.mix({ method: args[0] }, args[1])\n          : nx.mix({ url: args[0] }, args[1]);\n        break;\n      case 3:\n        options = nx.mix({ method: args[0], url: args[1] }, args[2]);\n        break;\n      case 4:\n        options = nx.mix({ method: args[0], url: args[1], data: args[2] }, args[3]);\n        break;\n      default:\n        options = null;\n        nx.error(MSG_ERROR);\n    }\n\n    options = nx.mix(null, DEFAULT_OPTIONS, options);\n\n    return !inIsArray\n      ? options\n      : [options.method, options.url, options.data, nxDelete(options, DEL_FIELDS)];\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = nx.parseRequestArgs;\n  }\n})();\n"]}